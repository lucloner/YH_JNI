buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

    }
    dependencies {
//        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE'
//        classpath 'org.springframework:springloaded:1.2.0.RELEASE'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
    id 'cpp'
    id 'cunit-test-suite'
}

group 'net.vicp.biggee.jni'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'http://repo.spring.io/milestone'
    }

    maven {
        url 'http://repo.spring.io/libs-snapshot'
    }
}

test {
    jvmArgs += ["-Xmx1024M"]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'jnilibs', include: ['*.dll'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

println "Building on OS: " + System.properties['os.name']
println "Using JDK: " + System.properties['java.home']

def SYS_INCLUDE_DIR = this.properties['system.include.dir']
def SYS_LOCAL_INCLUDE_DIR = this.properties['system.local.include.dir']
def JNI_INCLUDE_DIR = this.properties['jni.include.dir']
def JNI_LIB_DIR = this.properties['jni.lib.dir']
def JNI_INCLUDE_DIR_HEADERS = JNI_INCLUDE_DIR + "\\win32"

println "Using system include directory: " + SYS_INCLUDE_DIR
println "Using system local include directory: " + SYS_LOCAL_INCLUDE_DIR
println "Using JNI include directory: " + JNI_INCLUDE_DIR
println "Using JNI lib directory: " + JNI_LIB_DIR
println "Using JNI lib headers: " + JNI_INCLUDE_DIR_HEADERS
println "Project Dir: " + projectDir

def template_binaries_all={
    checkedBy tasks.copyNativeDeps
    // Define a preprocessor macro for every binary
    cppCompiler.define "NDEBUG"

    // Define toolchain-specific compiler and linker options
    if (toolChain in Gcc) {
        cppCompiler.args "-O2", "-fno-access-control"
        linker.args "-Xlinker", "-S"
    }
    if (toolChain in VisualCpp) {
        cppCompiler.args "/Zi"
        cppCompiler.args "/VERBOSE"
        cppCompiler.args "/EXPORTS"
        cppCompiler.args "/SYMBOLS"
        linker.args "/VERBOSE"
    }

    linker.args "src/main/jni/opencv-4.1.2/build/x64/vc15/lib/opencv_world412.lib"

    if (targetPlatform.operatingSystem.macOsX) {
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
        cCompiler.args '-mmacosx-version-min=10.4'
        linker.args '-mmacosx-version-min=10.4'
    } else if (targetPlatform.operatingSystem.linux) {
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
        cCompiler.args '-D_FILE_OFFSET_BITS=64'
    } else if (targetPlatform.operatingSystem.windows) {
        cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
        linker.args "Shlwapi.lib", "Advapi32.lib"
    } else if (targetPlatform.operatingSystem.freeBSD) {
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
    }
}
def template_buildTypes={
    debug
    release
}
def filelist=new java.util.HashSet<String>()
def dirlist=new java.util.HashSet<String>()
def opencv_Headers=this.fileTree(dir:'src/main/jni/opencv-4.1.2',include:'**/*.h*')
for(opencv_h in opencv_Headers){
    println 'found header: '+opencv_h
}
def cHeaders = {
    srcDir "src/main/jni/headers"
    srcDir "src/main/jni/opencv-4.1.2/build/include"
    srcDir JNI_LIB_DIR
    srcDir JNI_INCLUDE_DIR_HEADERS
    include "**/*.h*"
}

model {
    components {
        hello(NativeLibrarySpec) {
            def cName=it.getBaseName()
            def cDllName=cName+'.dll'
            def cDllPath="$buildDir/libs/$cName/shared/release"
            def cTask="${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            dirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                c.source{
                    srcDirs 'src/main/jni/c'
                    include cName+'.c'
                }
                c.exportedHeaders cHeaders
            }

            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }

        //模板
        hello01(NativeLibrarySpec) {
            def cName=it.getBaseName()
            def cDllName=cName+'.dll'
            def cDllPath="$buildDir/libs/$cName/shared/release"
            def cTask="${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            dirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                c.source{
                    srcDirs 'src/main/jni/c'
                    include cName+'.c'
                }
                c.exportedHeaders cHeaders
            }
            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }

        IdentityCard(NativeLibrarySpec) {
            def cName=it.getBaseName()
            def cDllName=cName+'.dll'
            def cDllPath="$buildDir/libs/$cName/shared/release"
            def cTask="${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            dirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                cpp.source{
                    srcDirs 'src/main/jni/'+cName
                    include cName+'.cpp'
                }
                cpp.exportedHeaders cHeaders
            }

            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }


    }

    platforms {
        x64 {
            architecture "x86_64"
            println "x64"
        }
        x86 {
            architecture "x86"
            println "x86"
        }
    }

    toolChains {
        visualCpp(VisualCpp) {
            // Specify the installDir if Visual Studio cannot be located
            // installDir "C:/Apps/Microsoft Visual Studio 10.0"
        }
//        gcc(Gcc) {
            // Uncomment to use a GCC install that is not in the PATH
//             path "D:/tool-chains/mingw-w64/mingw64/bin"
//        }
//        clang(Clang){
//            path "D:/tool-chains/LLVM/bin"
//        }
    }
}

task copyNativeDeps(type: Copy) {
    def toDir = rootProject.file('jnilibs')
    from dirlist
    into toDir
}
task clearNativeDeps(type: Delete) {
    def toDel = file('jnilibs').listFiles()
    delete toDel
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
        dependencies {
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'HelloWorld'
    }
}

tasks.compileJava.dependsOn 'copyNativeDeps'
tasks.clean.dependsOn 'clearNativeDeps'