buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

    }
    dependencies {
//        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE'
//        classpath 'org.springframework:springloaded:1.2.0.RELEASE'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
    id 'cpp'
    id 'cunit-test-suite'
    id 'c'
    id 'idea'
}

group 'net.vicp.biggee.jni'
version "1.0.1-SNAPSHOT-${new Date().format("YYYYMMdd-hhmmss")}"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'http://repo.spring.io/milestone'
    }

    maven {
        url 'http://repo.spring.io/libs-snapshot'
    }
}

test {
    jvmArgs += ["-Xmx1024M"]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'jnilibs', include: ['*.dll'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

println "Building on OS: " + System.properties['os.name']
println "Building on CPU: " + org.gradle.internal.os.OperatingSystem.current().nativePrefix
println "Using JDK: " + System.properties['java.home']

def JNI_INCLUDE_DIR = this.properties['jni.include.dir']
def JNI_LIB_DIR = this.properties['jni.lib.dir']
def JNI_INCLUDE_DIR_HEADERS = JNI_INCLUDE_DIR + "\\win32"

def filelist = []
def copyNativeDepsDirlist = []

def headerList = ["src/main/jni/headers"]

def gcc_linux_opencv_libs_412=['/usr/lib/x86_64-linux-gnu/libopencv_calib3d.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_core.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_features2d.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_flann.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_highgui.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_imgproc.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_ml.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_objdetect.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_photo.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_stitching.so.4.1.2','/usr/lib/x86_64-linux-gnu/libopencv_video.so.4.1.2']
def gcc_linux_opencv_libs_249=['/usr/lib/x86_64-linux-gnu/libopencv_calib3d.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_contrib.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_core.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_features2d.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_flann.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_gpu.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_highgui.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_imgproc.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_legacy.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_ml.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_objdetect.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_ocl.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_photo.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_stitching.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_superres.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_ts.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_video.so.2.4.9','/usr/lib/x86_64-linux-gnu/libopencv_videostab.so.2.4.9']

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    JNI_INCLUDE_DIR = "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
    JNI_LIB_DIR = "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
    JNI_INCLUDE_DIR_HEADERS = "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
    headerList.add "/usr/local/include"
    headerList.add "/usr/local/include/opencv4"
} else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    filelist.add(file("src/main/jni/opencv-4.1.2/build/x64/vc15/bin/opencv_world412.dll").path)
    headerList.add "src/main/jni/opencv-4.1.2/build/include"
    copyNativeDepsDirlist.add file("src/main/jni/opencv-4.1.2/build/x64/vc15/bin/opencv_world412.dll")
}

def cHeaders = {
    srcDir headerList
    srcDir JNI_LIB_DIR
    srcDir JNI_INCLUDE_DIR_HEADERS
    include "**/*.h*"
    println "headers:" + srcDirs
}

println "Using JNI include directory: " + JNI_INCLUDE_DIR
println "Using JNI lib directory: " + JNI_LIB_DIR
println "Using JNI lib headers: " + JNI_INCLUDE_DIR_HEADERS
println "Project Dir: " + projectDir

def template_binaries_all = {
    checkedBy tasks.copyNativeDeps
    // Define a preprocessor macro for every binary
    cCompiler.define "NDEBUG"

    // Define toolchain-specific compiler and linker options
    if (toolChain in Gcc) {
        cCompiler.args "-O2", "-fno-access-control"
        cCompiler.args "-ggdb"
        cCompiler.args "-v"
        linker.args "-Xlinker", "-S"
        linker.args "-v"
        for(lib in gcc_linux_opencv_libs_412){
            if(file(lib).exists()){
                linker.args lib
            }
        }
        for(lib in gcc_linux_opencv_libs_249){
            if(file(lib).exists()){
                linker.args lib
            }
        }
    }
    if (toolChain in VisualCpp) {
        cCompiler.args "/VERBOSE"
        cCompiler.args "/Wall"
        linker.args "/VERBOSE"
        linker.args "/ALIGN 4096"
        linker.args "/DLL"
        linker.args "/LARGEADDRESSAWARE"
        cCompiler.args "/Zi"
        cCompiler.args "/EHa"
        cCompiler.args "/O2"
        cCompiler.args "/GL"
        linker.args "src/main/jni/opencv-4.1.2/build/x64/vc15/lib/opencv_world412.lib"
    }

    if (toolChain in Clang) {
        cCompiler.args "-g"
        cCompiler.args "-fparse-all-comments"
        cCompiler.args "-dD"
        cCompiler.args "-dI"
        cCompiler.args "-dM"
        cCompiler.args "-E"
        cCompiler.args "-fsanitize=address"
        cCompiler.args "-v"
        cCompiler.args "-w"
        linker.args "-v"
    }

    if (toolChain in Gcc) {
        cCompiler.args "-fPIC"
        cCompiler.args "-v"
        linker.args "-v"
    }

    if (targetPlatform.operatingSystem.macOsX) {
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
        cCompiler.args '-mmacosx-version-min=10.4'
        linker.args '-mmacosx-version-min=10.4'
    } else if (targetPlatform.operatingSystem.linux) {
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
        cCompiler.args '-D_FILE_OFFSET_BITS=64'
    } else if (targetPlatform.operatingSystem.windows) {
        cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
//        linker.args "Shlwapi.lib", "Advapi32.lib"
    } else if (targetPlatform.operatingSystem.freeBSD) {
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
    }
    println "****************[" + it + "]****************"
    println "C Compiler args:"
    println cCompiler.args
    cppCompiler.args.addAll cCompiler.args
    if(toolChain in Gcc){
        cCompiler.args "-std=gnu11"
        cppCompiler.args "-std=c++1z"
    }
    if (it.toString().contains("shared")) {
        println "****************[" + it.sharedLibraryFile + "]****************"
    }
    println "C++ Compiler args:"
    println cppCompiler.args
    println "****************[" + toolChain + "]****************"
}

def template_buildTypes = {
    debug
    release
}

//def opencv_Headers=this.fileTree(dir:'src/main/jni/opencv-4.1.2',include:'**/*.h*')
//for(opencv_h in opencv_Headers){
//    println 'found header: '+opencv_h
//}


model {
    components {
        hello(NativeLibrarySpec) {
            def cName = it.getBaseName()
            def cDllName = cName + '.dll'
            def cDllPath = "$buildDir/libs/$cName/shared/release"
            def cTask = "${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            copyNativeDepsDirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                c.source {
                    srcDirs 'src/main/jni/c'
                    include cName + '.c'
                }
                c.exportedHeaders cHeaders
            }

            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }

        //模板
        hello01(NativeLibrarySpec) {
            def cName = it.getBaseName()
            def cDllName = cName + '.dll'
            def cDllPath = "$buildDir/libs/$cName/shared/release"
            def cTask = "${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            copyNativeDepsDirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                c.source {
                    srcDirs 'src/main/jni/c'
                    include cName + '.c'
                }
                c.exportedHeaders cHeaders
            }
            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }

        IdentityCard(NativeLibrarySpec) {
            def cName = it.getBaseName()
            def cDllName = cName + '.dll'
            def cDllPath = "$buildDir/libs/$cName/shared/release"
            def cTask = "${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            copyNativeDepsDirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                cpp.source {
                    srcDirs 'src/main/jni/' + cName
                    include cName + '.cpp'
                }
                cpp.exportedHeaders cHeaders
            }

            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }

        BlankPage_Detect(NativeLibrarySpec) {
            def cName = it.getBaseName()
            def cDllName = cName + '.dll'
            def cDllPath = "$buildDir/libs/$cName/shared/release"
            def cTask = "${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            copyNativeDepsDirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                cpp.source {
                    srcDirs 'src/main/jni/' + cName
                    include cName + '.cpp'
                }
                cpp.exportedHeaders cHeaders
            }

            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }

        RemoveBlackBorder(NativeLibrarySpec) {
            def cName = it.getBaseName()
            def cDllName = cName + '.dll'
            def cDllPath = "$buildDir/libs/$cName/shared/release"
            def cTask = "${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            copyNativeDepsDirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                cpp.source {
                    srcDirs 'src/main/jni/' + cName
                    include cName + '.cpp'
                }
                cpp.exportedHeaders cHeaders
            }

            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }

        RectifyUnlineDll(NativeLibrarySpec) {
            def cName = it.getBaseName()
            def cDllName = cName + '.dll'
            def cDllPath = "$buildDir/libs/$cName/shared/release"
            def cTask = "${cName}ReleaseSharedLibrary"
            //批量导入使用
            println "Compile: ${cName}.c, to: ${cDllPath},${cDllName}"
            filelist.add(cDllName)
            copyNativeDepsDirlist.add(cDllPath)
            $.tasks.copyNativeDeps.dependsOn cTask

            sources {
                cpp.source {
                    srcDirs 'src/main/jni/' + cName
                    include cName + '.cpp'
                }
                cpp.exportedHeaders cHeaders
            }

            binaries.all template_binaries_all
            buildTypes template_buildTypes
            targetPlatform "x64"
        }
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
        x86 {
            architecture "x86"
        }
    }

    toolChains {
        visualCpp(VisualCpp) {
            // Specify the installDir if Visual Studio cannot be located
            // installDir "C:/Apps/Microsoft Visual Studio 10.0"
        }
        gcc(Gcc) {
            //Uncomment to use a GCC install that is not in the PATH
            //path "D:/tool-chains/mingw-w64/mingw64/bin"
        }
        clang(Clang) {
            //path "D:/tool-chains/LLVM/bin"
        }
    }
}

task copyNativeDeps(type: Copy) {
    from copyNativeDepsDirlist
    into rootProject.file('jnilibs')
}

copyNativeDeps.doFirst {
    for (t in tasks) {
        if (t instanceof LinkSharedLibrary) {
            copyNativeDepsDirlist.add(t.linkedFile)
        }
    }
}

copyNativeDeps.doLast {
    println "copyNativeDeps:" + copyNativeDepsDirlist
}

task clearNativeDeps(type: Delete) {
    def jnilibsDir = file('jnilibs')
    if (jnilibsDir.isDirectory()) {
        def toDel = jnilibsDir.listFiles()
        delete toDel
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
        dependencies {
        }
    }
}

tasks.compileJava.dependsOn 'copyNativeDeps'
tasks.clean.dependsOn 'clearNativeDeps'

jar {
    from {
        //添加依懒到打包文件
        //'jnilibs'
    }
    manifest {
        attributes 'Main-Class': 'net.vicp.biggee.jni.YH_JNI_main'
    }
}

task copyJni(type: Copy,dependsOn: jar) {
    from files('jnilibs')
    into "$buildDir/output/jnilibs"
}


task copyJarAndJni(type: Copy,dependsOn: copyJni) {
    from jar.archiveFile
    into "$buildDir/output"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
